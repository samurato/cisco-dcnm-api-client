# coding: utf-8

"""
    DCNM Postman Collection

    # Cisco Datacenter Network Manager (DCNM) API Postman Collection  This repository contains the a Postman collection and environment variable file to leverage the REST API on DCNM.  This collection was tested and built using DCNM 11.5(1) within the DevNet Sandbox infrastructure.  As such, some variables will need to be reset if used outside of this testbed.  ## Cisco DCNM Background  DCNM is a network management platform for all NX-OS-centric network deployments.  DCNM has several different installation personas, including LAN Fabric (BGP-EVPN with VXLAN), LAN Management (classic layer-2/layer-3 architecture), IP Fabric for Media (IPFM) and storage networking (SAN), however this collection covers the LAN fabric deployment model supporting an EVPN-VXLAN fabric backed by Nexus 9000-series switching.  APIs for other personas, while potentially overlapping, are not covered as part of this collection.  ## Additional Resources - [DCNM Sandbox on DevNet](https://devnetsandbox.cisco.com/RM/Diagram/Index/4b6f511a-4d7c-4764-927b-0fc591a661c6?diagramType=Topology) - REST API documentation is available off-box [here](https://developer.cisco.com/docs/data-center-network-manager/11-5-1/) - REST API documentation also available directly on the DCNM at `http://DCNM.IP.ADDRESS/api-docs`  ## Covered APIs  - DCNM administration - L4-L7 service operations - Fabric, Network, Interface, VRF, and Link top-down operations - LAN credential management - Policy and Template operations - Physical switch roles and discovery  ## Notes about the included ENV variables  Prior to using any requests, please ensure you gather the token from your DCNM instance using the included API call `dcnm login - gather token`.  This call will log you into the DCNM (using credentials stored in the environment) and automatically store the key for use with every other request in the collection.  In order to keep the environment variables to a reasonable number, reuse was included.  While I made attempts to include commonly reused variables (fabric names, VRF names, etc), the variables may require a bit of context parsing to ensure the correct usage within a particular environment.  In some instances, variables are defined within the payload, but not inside of the environment file to discern that the specific variable should be replaced.  As a final note, for any API or payload referencing a device serial number -- please ensure correct serial numbers are inserted as appropriate.  _In some instances, Javascript tests have been included as part of the API request to populate another variable that would be used somewhere else in that folder of requests (VRF IDs, VLAN IDs, etc).  These can be overridden in the environment settings, but have been included for automated tasks (like using Runner)_  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ImagePackageManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def rest_imagemanagement_job_job_id_get(self, job_id, **kwargs):  # noqa: E501
        """get job details  # noqa: E501

        Retrieves the status of an image compatibility or upgrade job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_imagemanagement_job_job_id_get(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: (required)
        :param str content_type:
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_imagemanagement_job_job_id_get_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_imagemanagement_job_job_id_get_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def rest_imagemanagement_job_job_id_get_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """get job details  # noqa: E501

        Retrieves the status of an image compatibility or upgrade job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_imagemanagement_job_job_id_get_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: (required)
        :param str content_type:
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'content_type', 'dcnm_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_imagemanagement_job_job_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `rest_imagemanagement_job_job_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['job_id'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/imagemanagement/job/{job_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_imagemanagement_job_post(self, **kwargs):  # noqa: E501
        """upgrade nxos  # noqa: E501

        Uses same endpoint as compatibility check, but with unique payload for image upgrade.   Full payload example: ``` Example Body: {\"id\":\"1\",\"eraseStartUp\":false,\"saverunningConfig\":true,\"archiveFailureLog\":true,\"concurrentExec\":true,\"executeImmediately\":false, \"comments\":\"\",\"jobOwner\":\"admin\",\"jobType\":0,\"strScheduledTime\":\"Apr/26/2019,11:30:00\",\"strJobCreationTime\":\"Apr/26/2019,11:30:00\", \"maintenanceMode\":false,\"skipDisruptiveUpgrade\":false,\"taskList\":[{\"kickStartImage\":\"/NotApplicable\",\"systemImageFile\":\"/var/lib/dcnm/images/nxos.9.2.3.bin\", \"ssiImageFile\":\"/NotApplicable\",\"installLog\":\"\",\"taskAction\":\"Completed\",\"statusDescr\":\"\",\"compatibilty_desc\":\"Disruptiveupgrade\", \"path\":null,\"strStatus\":\"NA\",\"strCompStatus\":\"SUCCESS\",\"vrfSelected\":\"management\",\"actionType\":0,\"sequence\":1,\"jobId\":1,\"bdualSup\":false, \"strScheduledTime\":null,\"strCompletedTime\":null,\"bMaintenanceMode\":false,\"parallelLineCardUpgrade\":false,\"noReload\":false,\"nonDisruptive\":false, \"nonInterruptive\":true,\"biosForce\":false,\"id\":2,\"hostName\":\"spine-1\",\"ipAddress\":\"10.195.198.244\",\"platform\":\"N9K\",\"version\":\"7.0(3)I7(6)\", \"serverName\":\"Default_SCP_Repository\",\"maintenanceDesc\":null,\"type\":\"SERVER\",\"status\":\"NA\",\"compatibilty_status\":\"SUCCESS\"}]}  ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_imagemanagement_job_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_imagemanagement_job_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.rest_imagemanagement_job_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def rest_imagemanagement_job_post_with_http_info(self, **kwargs):  # noqa: E501
        """upgrade nxos  # noqa: E501

        Uses same endpoint as compatibility check, but with unique payload for image upgrade.   Full payload example: ``` Example Body: {\"id\":\"1\",\"eraseStartUp\":false,\"saverunningConfig\":true,\"archiveFailureLog\":true,\"concurrentExec\":true,\"executeImmediately\":false, \"comments\":\"\",\"jobOwner\":\"admin\",\"jobType\":0,\"strScheduledTime\":\"Apr/26/2019,11:30:00\",\"strJobCreationTime\":\"Apr/26/2019,11:30:00\", \"maintenanceMode\":false,\"skipDisruptiveUpgrade\":false,\"taskList\":[{\"kickStartImage\":\"/NotApplicable\",\"systemImageFile\":\"/var/lib/dcnm/images/nxos.9.2.3.bin\", \"ssiImageFile\":\"/NotApplicable\",\"installLog\":\"\",\"taskAction\":\"Completed\",\"statusDescr\":\"\",\"compatibilty_desc\":\"Disruptiveupgrade\", \"path\":null,\"strStatus\":\"NA\",\"strCompStatus\":\"SUCCESS\",\"vrfSelected\":\"management\",\"actionType\":0,\"sequence\":1,\"jobId\":1,\"bdualSup\":false, \"strScheduledTime\":null,\"strCompletedTime\":null,\"bMaintenanceMode\":false,\"parallelLineCardUpgrade\":false,\"noReload\":false,\"nonDisruptive\":false, \"nonInterruptive\":true,\"biosForce\":false,\"id\":2,\"hostName\":\"spine-1\",\"ipAddress\":\"10.195.198.244\",\"platform\":\"N9K\",\"version\":\"7.0(3)I7(6)\", \"serverName\":\"Default_SCP_Repository\",\"maintenanceDesc\":null,\"type\":\"SERVER\",\"status\":\"NA\",\"compatibilty_status\":\"SUCCESS\"}]}  ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_imagemanagement_job_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dcnm_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_imagemanagement_job_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/imagemanagement/job', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_packagemgnt_activate_post(self, **kwargs):  # noqa: E501
        """uninstall package  # noqa: E501

        Uninstalls package from device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_packagemgnt_activate_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_packagemgnt_activate_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.rest_packagemgnt_activate_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def rest_packagemgnt_activate_post_with_http_info(self, **kwargs):  # noqa: E501
        """uninstall package  # noqa: E501

        Uninstalls package from device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_packagemgnt_activate_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_packagemgnt_activate_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/packagemgnt/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_packagemgnt_packages_get(self, **kwargs):  # noqa: E501
        """get all active and inactive packages  # noqa: E501

        Lists all active and inactive RPMs/SMUs within DCNM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_packagemgnt_packages_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_packagemgnt_packages_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.rest_packagemgnt_packages_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def rest_packagemgnt_packages_get_with_http_info(self, **kwargs):  # noqa: E501
        """get all active and inactive packages  # noqa: E501

        Lists all active and inactive RPMs/SMUs within DCNM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_packagemgnt_packages_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dcnm_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_packagemgnt_packages_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/packagemgnt/packages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_packagemgnt_uploaded_packages_get(self, **kwargs):  # noqa: E501
        """get available uploaded packages  # noqa: E501

        Lists all active and inactive RPMs/SMUs within DCNM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_packagemgnt_uploaded_packages_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_packagemgnt_uploaded_packages_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.rest_packagemgnt_uploaded_packages_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def rest_packagemgnt_uploaded_packages_get_with_http_info(self, **kwargs):  # noqa: E501
        """get available uploaded packages  # noqa: E501

        Lists all active and inactive RPMs/SMUs within DCNM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_packagemgnt_uploaded_packages_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dcnm_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_packagemgnt_uploaded_packages_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/packagemgnt/uploaded-packages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_poap_servers_smart_image_delete(self, **kwargs):  # noqa: E501
        """delete image  # noqa: E501

        Removes image from DCNM image store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_poap_servers_smart_image_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_poap_servers_smart_image_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.rest_poap_servers_smart_image_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def rest_poap_servers_smart_image_delete_with_http_info(self, **kwargs):  # noqa: E501
        """delete image  # noqa: E501

        Removes image from DCNM image store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_poap_servers_smart_image_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dcnm_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_poap_servers_smart_image_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/poap/servers/smart-image', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_poap_servers_smart_image_upload_post(self, **kwargs):  # noqa: E501
        """image upload  # noqa: E501

        Uploads an image to DCNM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_poap_servers_smart_image_upload_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_file_name:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_poap_servers_smart_image_upload_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.rest_poap_servers_smart_image_upload_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def rest_poap_servers_smart_image_upload_post_with_http_info(self, **kwargs):  # noqa: E501
        """image upload  # noqa: E501

        Uploads an image to DCNM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_poap_servers_smart_image_upload_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_file_name:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_file_name', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_poap_servers_smart_image_upload_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'image_file_name' in params:
            local_var_files['imageFileName'] = params['image_file_name']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/poap/servers/SmartImageUpload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_poap_servers_uploaded_images_table_get(self, **kwargs):  # noqa: E501
        """get all uploaded images  # noqa: E501

        Retrieves a table of all uploaded NXOS images within DCNM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_poap_servers_uploaded_images_table_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_poap_servers_uploaded_images_table_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.rest_poap_servers_uploaded_images_table_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def rest_poap_servers_uploaded_images_table_get_with_http_info(self, **kwargs):  # noqa: E501
        """get all uploaded images  # noqa: E501

        Retrieves a table of all uploaded NXOS images within DCNM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_poap_servers_uploaded_images_table_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dcnm_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_poap_servers_uploaded_images_table_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/poap/servers/uploaded-images-table', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
