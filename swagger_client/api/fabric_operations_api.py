# coding: utf-8

"""
    DCNM Postman Collection

    # Cisco Datacenter Network Manager (DCNM) API Postman Collection  This repository contains the a Postman collection and environment variable file to leverage the REST API on DCNM.  This collection was tested and built using DCNM 11.5(1) within the DevNet Sandbox infrastructure.  As such, some variables will need to be reset if used outside of this testbed.  ## Cisco DCNM Background  DCNM is a network management platform for all NX-OS-centric network deployments.  DCNM has several different installation personas, including LAN Fabric (BGP-EVPN with VXLAN), LAN Management (classic layer-2/layer-3 architecture), IP Fabric for Media (IPFM) and storage networking (SAN), however this collection covers the LAN fabric deployment model supporting an EVPN-VXLAN fabric backed by Nexus 9000-series switching.  APIs for other personas, while potentially overlapping, are not covered as part of this collection.  ## Additional Resources - [DCNM Sandbox on DevNet](https://devnetsandbox.cisco.com/RM/Diagram/Index/4b6f511a-4d7c-4764-927b-0fc591a661c6?diagramType=Topology) - REST API documentation is available off-box [here](https://developer.cisco.com/docs/data-center-network-manager/11-5-1/) - REST API documentation also available directly on the DCNM at `http://DCNM.IP.ADDRESS/api-docs`  ## Covered APIs  - DCNM administration - L4-L7 service operations - Fabric, Network, Interface, VRF, and Link top-down operations - LAN credential management - Policy and Template operations - Physical switch roles and discovery  ## Notes about the included ENV variables  Prior to using any requests, please ensure you gather the token from your DCNM instance using the included API call `dcnm login - gather token`.  This call will log you into the DCNM (using credentials stored in the environment) and automatically store the key for use with every other request in the collection.  In order to keep the environment variables to a reasonable number, reuse was included.  While I made attempts to include commonly reused variables (fabric names, VRF names, etc), the variables may require a bit of context parsing to ensure the correct usage within a particular environment.  In some instances, variables are defined within the payload, but not inside of the environment file to discern that the specific variable should be replaced.  As a final note, for any API or payload referencing a device serial number -- please ensure correct serial numbers are inserted as appropriate.  _In some instances, Javascript tests have been included as part of the API request to populate another variable that would be used somewhere else in that folder of requests (VRF IDs, VLAN IDs, etc).  These can be overridden in the environment settings, but have been included for automated tasks (like using Runner)_  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FabricOperationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def rest_config_fabric_backup_post(self, fabric, **kwargs):  # noqa: E501
        """fabric backup  # noqa: E501

        Creates a snapshot backup of the fabric named within the URI with a given user-defined tag  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_config_fabric_backup_post(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :param str tag:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_config_fabric_backup_post_with_http_info(fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_config_fabric_backup_post_with_http_info(fabric, **kwargs)  # noqa: E501
            return data

    def rest_config_fabric_backup_post_with_http_info(self, fabric, **kwargs):  # noqa: E501
        """fabric backup  # noqa: E501

        Creates a snapshot backup of the fabric named within the URI with a given user-defined tag  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_config_fabric_backup_post_with_http_info(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :param str tag:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric', 'body', 'dcnm_token', 'content_type', 'tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_config_fabric_backup_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_config_fabric_backup_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/config/{fabric}/backup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_control_fabrics_fabric_delete(self, fabric, **kwargs):  # noqa: E501
        """delete fabric  # noqa: E501

        Removes fabric named in the URI from DCNM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_control_fabrics_fabric_delete(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str accept:
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_control_fabrics_fabric_delete_with_http_info(fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_control_fabrics_fabric_delete_with_http_info(fabric, **kwargs)  # noqa: E501
            return data

    def rest_control_fabrics_fabric_delete_with_http_info(self, fabric, **kwargs):  # noqa: E501
        """delete fabric  # noqa: E501

        Removes fabric named in the URI from DCNM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_control_fabrics_fabric_delete_with_http_info(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str accept:
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric', 'accept', 'dcnm_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_control_fabrics_fabric_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_control_fabrics_fabric_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/control/fabrics/{fabric}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_control_fabrics_fabric_get(self, fabric, **kwargs):  # noqa: E501
        """get single fabric  # noqa: E501

        Lists the fabric details for the queried fabric.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_control_fabrics_fabric_get(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str accept:
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_control_fabrics_fabric_get_with_http_info(fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_control_fabrics_fabric_get_with_http_info(fabric, **kwargs)  # noqa: E501
            return data

    def rest_control_fabrics_fabric_get_with_http_info(self, fabric, **kwargs):  # noqa: E501
        """get single fabric  # noqa: E501

        Lists the fabric details for the queried fabric.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_control_fabrics_fabric_get_with_http_info(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str accept:
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric', 'accept', 'dcnm_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_control_fabrics_fabric_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_control_fabrics_fabric_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/control/fabrics/{fabric}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_control_fabrics_fabric_id_number_inventory_discover_post(self, fabric_id_number, **kwargs):  # noqa: E501
        """register switch  # noqa: E501

        Uses the reachability information as a payload to register switches as members of the fabric named within the URI.  All switches will be added as `leaf` nodes, which may require some reassignment using another API endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_control_fabrics_fabric_id_number_inventory_discover_post(fabric_id_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric_id_number: (required)
        :param object body:
        :param str dcnm_token:
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_control_fabrics_fabric_id_number_inventory_discover_post_with_http_info(fabric_id_number, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_control_fabrics_fabric_id_number_inventory_discover_post_with_http_info(fabric_id_number, **kwargs)  # noqa: E501
            return data

    def rest_control_fabrics_fabric_id_number_inventory_discover_post_with_http_info(self, fabric_id_number, **kwargs):  # noqa: E501
        """register switch  # noqa: E501

        Uses the reachability information as a payload to register switches as members of the fabric named within the URI.  All switches will be added as `leaf` nodes, which may require some reassignment using another API endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_control_fabrics_fabric_id_number_inventory_discover_post_with_http_info(fabric_id_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric_id_number: (required)
        :param object body:
        :param str dcnm_token:
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric_id_number', 'body', 'dcnm_token', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_control_fabrics_fabric_id_number_inventory_discover_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric_id_number' is set
        if ('fabric_id_number' not in params or
                params['fabric_id_number'] is None):
            raise ValueError("Missing the required parameter `fabric_id_number` when calling `rest_control_fabrics_fabric_id_number_inventory_discover_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric_id_number' in params:
            path_params['fabric_id_number'] = params['fabric_id_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/control/fabrics/{fabric_id_number}/inventory/discover', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_control_fabrics_fabric_id_number_inventory_test_reachability_post(self, fabric_id_number, **kwargs):  # noqa: E501
        """discover switches  # noqa: E501

        Used to find switches within a given network to be added into DCNM inventory for a specific fabric. Options in payload are similar to Fabric Builder UI, in which a `seed IP`, `number of hops`, and device credentials are given for DCNM to \"walk\" through.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_control_fabrics_fabric_id_number_inventory_test_reachability_post(fabric_id_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric_id_number: (required)
        :param str body:
        :param str content_type:
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_control_fabrics_fabric_id_number_inventory_test_reachability_post_with_http_info(fabric_id_number, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_control_fabrics_fabric_id_number_inventory_test_reachability_post_with_http_info(fabric_id_number, **kwargs)  # noqa: E501
            return data

    def rest_control_fabrics_fabric_id_number_inventory_test_reachability_post_with_http_info(self, fabric_id_number, **kwargs):  # noqa: E501
        """discover switches  # noqa: E501

        Used to find switches within a given network to be added into DCNM inventory for a specific fabric. Options in payload are similar to Fabric Builder UI, in which a `seed IP`, `number of hops`, and device credentials are given for DCNM to \"walk\" through.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_control_fabrics_fabric_id_number_inventory_test_reachability_post_with_http_info(fabric_id_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric_id_number: (required)
        :param str body:
        :param str content_type:
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric_id_number', 'body', 'content_type', 'dcnm_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_control_fabrics_fabric_id_number_inventory_test_reachability_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric_id_number' is set
        if ('fabric_id_number' not in params or
                params['fabric_id_number'] is None):
            raise ValueError("Missing the required parameter `fabric_id_number` when calling `rest_control_fabrics_fabric_id_number_inventory_test_reachability_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric_id_number' in params:
            path_params['fabric_id_number'] = params['fabric_id_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/control/fabrics/{fabric_id_number}/inventory/test-reachability', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_control_fabrics_fabric_inventory_get(self, fabric, **kwargs):  # noqa: E501
        """get fabric inventory  # noqa: E501

        Gets all information for all devices that are part of the fabric named in the URI, including both DCNM as well as hardware specific facts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_control_fabrics_fabric_inventory_get(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str accept:
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_control_fabrics_fabric_inventory_get_with_http_info(fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_control_fabrics_fabric_inventory_get_with_http_info(fabric, **kwargs)  # noqa: E501
            return data

    def rest_control_fabrics_fabric_inventory_get_with_http_info(self, fabric, **kwargs):  # noqa: E501
        """get fabric inventory  # noqa: E501

        Gets all information for all devices that are part of the fabric named in the URI, including both DCNM as well as hardware specific facts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_control_fabrics_fabric_inventory_get_with_http_info(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str accept:
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric', 'accept', 'dcnm_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_control_fabrics_fabric_inventory_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_control_fabrics_fabric_inventory_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/control/fabrics/{fabric}/inventory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_control_fabrics_fabric_put(self, fabric, **kwargs):  # noqa: E501
        """modify fabric  # noqa: E501

        Used to modify an existing fabric with the desired nv pairs in the payload.  Can use similar payload to that used for creating a fabric.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_control_fabrics_fabric_put(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param object body:
        :param str accept:
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_control_fabrics_fabric_put_with_http_info(fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_control_fabrics_fabric_put_with_http_info(fabric, **kwargs)  # noqa: E501
            return data

    def rest_control_fabrics_fabric_put_with_http_info(self, fabric, **kwargs):  # noqa: E501
        """modify fabric  # noqa: E501

        Used to modify an existing fabric with the desired nv pairs in the payload.  Can use similar payload to that used for creating a fabric.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_control_fabrics_fabric_put_with_http_info(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param object body:
        :param str accept:
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric', 'body', 'accept', 'dcnm_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_control_fabrics_fabric_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_control_fabrics_fabric_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/control/fabrics/{fabric}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_control_fabrics_fabric_switches9_uncwexete8_delete(self, fabric, **kwargs):  # noqa: E501
        """delete switch  # noqa: E501

        Removes switch (named by serial) in the URI from the fabric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_control_fabrics_fabric_switches9_uncwexete8_delete(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_control_fabrics_fabric_switches9_uncwexete8_delete_with_http_info(fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_control_fabrics_fabric_switches9_uncwexete8_delete_with_http_info(fabric, **kwargs)  # noqa: E501
            return data

    def rest_control_fabrics_fabric_switches9_uncwexete8_delete_with_http_info(self, fabric, **kwargs):  # noqa: E501
        """delete switch  # noqa: E501

        Removes switch (named by serial) in the URI from the fabric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_control_fabrics_fabric_switches9_uncwexete8_delete_with_http_info(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric', 'dcnm_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_control_fabrics_fabric_switches9_uncwexete8_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_control_fabrics_fabric_switches9_uncwexete8_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/control/fabrics/{fabric}/switches/9UNCWEXETE8', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_control_fabrics_get(self, **kwargs):  # noqa: E501
        """get all fabrics  # noqa: E501

        Queries DCNM for all facts and information about all configured fabrics within the inventory  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_control_fabrics_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept:
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_control_fabrics_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.rest_control_fabrics_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def rest_control_fabrics_get_with_http_info(self, **kwargs):  # noqa: E501
        """get all fabrics  # noqa: E501

        Queries DCNM for all facts and information about all configured fabrics within the inventory  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_control_fabrics_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept:
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'dcnm_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_control_fabrics_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/control/fabrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_control_fabrics_post(self, **kwargs):  # noqa: E501
        """create fabric  # noqa: E501

        Creates a new fabric with the specific nv pairs defined within the payload.  These values mimic the names/values that would be applied through the DCNM Fabric Builder UI.  To obtain a payload for this deployment, the API-Tool within DCNM can watch the request through the UI and give the applicable call and payload for reuse/modification later.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_control_fabrics_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str accept:
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_control_fabrics_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.rest_control_fabrics_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def rest_control_fabrics_post_with_http_info(self, **kwargs):  # noqa: E501
        """create fabric  # noqa: E501

        Creates a new fabric with the specific nv pairs defined within the payload.  These values mimic the names/values that would be applied through the DCNM Fabric Builder UI.  To obtain a payload for this deployment, the API-Tool within DCNM can watch the request through the UI and give the applicable call and payload for reuse/modification later.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_control_fabrics_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str accept:
        :param str dcnm_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept', 'dcnm_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_control_fabrics_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/control/fabrics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
