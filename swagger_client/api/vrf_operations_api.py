# coding: utf-8

"""
    DCNM Postman Collection

    # Cisco Datacenter Network Manager (DCNM) API Postman Collection  This repository contains the a Postman collection and environment variable file to leverage the REST API on DCNM.  This collection was tested and built using DCNM 11.5(1) within the DevNet Sandbox infrastructure.  As such, some variables will need to be reset if used outside of this testbed.  ## Cisco DCNM Background  DCNM is a network management platform for all NX-OS-centric network deployments.  DCNM has several different installation personas, including LAN Fabric (BGP-EVPN with VXLAN), LAN Management (classic layer-2/layer-3 architecture), IP Fabric for Media (IPFM) and storage networking (SAN), however this collection covers the LAN fabric deployment model supporting an EVPN-VXLAN fabric backed by Nexus 9000-series switching.  APIs for other personas, while potentially overlapping, are not covered as part of this collection.  ## Additional Resources - [DCNM Sandbox on DevNet](https://devnetsandbox.cisco.com/RM/Diagram/Index/4b6f511a-4d7c-4764-927b-0fc591a661c6?diagramType=Topology) - REST API documentation is available off-box [here](https://developer.cisco.com/docs/data-center-network-manager/11-5-1/) - REST API documentation also available directly on the DCNM at `http://DCNM.IP.ADDRESS/api-docs`  ## Covered APIs  - DCNM administration - L4-L7 service operations - Fabric, Network, Interface, VRF, and Link top-down operations - LAN credential management - Policy and Template operations - Physical switch roles and discovery  ## Notes about the included ENV variables  Prior to using any requests, please ensure you gather the token from your DCNM instance using the included API call `dcnm login - gather token`.  This call will log you into the DCNM (using credentials stored in the environment) and automatically store the key for use with every other request in the collection.  In order to keep the environment variables to a reasonable number, reuse was included.  While I made attempts to include commonly reused variables (fabric names, VRF names, etc), the variables may require a bit of context parsing to ensure the correct usage within a particular environment.  In some instances, variables are defined within the payload, but not inside of the environment file to discern that the specific variable should be replaced.  As a final note, for any API or payload referencing a device serial number -- please ensure correct serial numbers are inserted as appropriate.  _In some instances, Javascript tests have been included as part of the API request to populate another variable that would be used somewhere else in that folder of requests (VRF IDs, VLAN IDs, etc).  These can be overridden in the environment settings, but have been included for automated tasks (like using Runner)_  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class VRFOperationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def rest_managed_pool_fabrics_fabric_partitions_ids_post(self, fabric, **kwargs):  # noqa: E501
        """get vrf segment id  # noqa: E501

        Uses DCNM resource manager to obtain a VRF segment ID value for tracking.  JS tests insert this into the `{{ vrf_id_number }}` ENV var  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_managed_pool_fabrics_fabric_partitions_ids_post(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_managed_pool_fabrics_fabric_partitions_ids_post_with_http_info(fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_managed_pool_fabrics_fabric_partitions_ids_post_with_http_info(fabric, **kwargs)  # noqa: E501
            return data

    def rest_managed_pool_fabrics_fabric_partitions_ids_post_with_http_info(self, fabric, **kwargs):  # noqa: E501
        """get vrf segment id  # noqa: E501

        Uses DCNM resource manager to obtain a VRF segment ID value for tracking.  JS tests insert this into the `{{ vrf_id_number }}` ENV var  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_managed_pool_fabrics_fabric_partitions_ids_post_with_http_info(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_managed_pool_fabrics_fabric_partitions_ids_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_managed_pool_fabrics_fabric_partitions_ids_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/managed-pool/fabrics/{fabric}/partitions/ids', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_resource_manager_reserve_id_post(self, **kwargs):  # noqa: E501
        """get vrf lite dot1q id  # noqa: E501

        Uses the DCNM resource manager to gather an unused 802.1q VLAN ID for use in the VRF for peering purposes.  JS test inserts this value after completion into the `{{ vrf_dot1q_vlan }}` ENV var  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_resource_manager_reserve_id_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_resource_manager_reserve_id_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.rest_resource_manager_reserve_id_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def rest_resource_manager_reserve_id_post_with_http_info(self, **kwargs):  # noqa: E501
        """get vrf lite dot1q id  # noqa: E501

        Uses the DCNM resource manager to gather an unused 802.1q VLAN ID for use in the VRF for peering purposes.  JS test inserts this value after completion into the `{{ vrf_dot1q_vlan }}` ENV var  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_resource_manager_reserve_id_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_resource_manager_reserve_id_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/resource-manager/reserve-id', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_resource_manager_vlan_fabric_get(self, fabric, **kwargs):  # noqa: E501
        """get proposed vrf vlan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_resource_manager_vlan_fabric_get(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str dcnm_token:
        :param str vlan_usage_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_resource_manager_vlan_fabric_get_with_http_info(fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_resource_manager_vlan_fabric_get_with_http_info(fabric, **kwargs)  # noqa: E501
            return data

    def rest_resource_manager_vlan_fabric_get_with_http_info(self, fabric, **kwargs):  # noqa: E501
        """get proposed vrf vlan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_resource_manager_vlan_fabric_get_with_http_info(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str dcnm_token:
        :param str vlan_usage_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric', 'dcnm_token', 'vlan_usage_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_resource_manager_vlan_fabric_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_resource_manager_vlan_fabric_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []
        if 'vlan_usage_type' in params:
            query_params.append(('vlanUsageType', params['vlan_usage_type']))  # noqa: E501

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/resource-manager/vlan/{fabric}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_top_down_fabrics_fabric_vrfs_attachments_get(self, fabric, **kwargs):  # noqa: E501
        """query vrf attachments  # noqa: E501

        Used to list all the attached switches and deployment status in the given VRFs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_top_down_fabrics_fabric_vrfs_attachments_get(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str dcnm_token:
        :param str content_type:
        :param str vrf_names:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_top_down_fabrics_fabric_vrfs_attachments_get_with_http_info(fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_top_down_fabrics_fabric_vrfs_attachments_get_with_http_info(fabric, **kwargs)  # noqa: E501
            return data

    def rest_top_down_fabrics_fabric_vrfs_attachments_get_with_http_info(self, fabric, **kwargs):  # noqa: E501
        """query vrf attachments  # noqa: E501

        Used to list all the attached switches and deployment status in the given VRFs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_top_down_fabrics_fabric_vrfs_attachments_get_with_http_info(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str dcnm_token:
        :param str content_type:
        :param str vrf_names:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric', 'dcnm_token', 'content_type', 'vrf_names']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_top_down_fabrics_fabric_vrfs_attachments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_top_down_fabrics_fabric_vrfs_attachments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []
        if 'vrf_names' in params:
            query_params.append(('vrf-names', params['vrf_names']))  # noqa: E501

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/top-down/fabrics/{fabric}/vrfs/attachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_top_down_fabrics_fabric_vrfs_attachments_post(self, fabric, **kwargs):  # noqa: E501
        """create multi-site extension attachment  # noqa: E501

        This specific payload creates a multi-site extension VRF switch attachment within DCNM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_top_down_fabrics_fabric_vrfs_attachments_post(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_top_down_fabrics_fabric_vrfs_attachments_post_with_http_info(fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_top_down_fabrics_fabric_vrfs_attachments_post_with_http_info(fabric, **kwargs)  # noqa: E501
            return data

    def rest_top_down_fabrics_fabric_vrfs_attachments_post_with_http_info(self, fabric, **kwargs):  # noqa: E501
        """create multi-site extension attachment  # noqa: E501

        This specific payload creates a multi-site extension VRF switch attachment within DCNM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_top_down_fabrics_fabric_vrfs_attachments_post_with_http_info(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric', 'body', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_top_down_fabrics_fabric_vrfs_attachments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_top_down_fabrics_fabric_vrfs_attachments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/top-down/fabrics/{fabric}/vrfs/attachments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_top_down_fabrics_fabric_vrfs_deployments_post(self, fabric, **kwargs):  # noqa: E501
        """deploy vrf  # noqa: E501

        Deploys the previously created VRF to the fabric defined in the URI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_top_down_fabrics_fabric_vrfs_deployments_post(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param object body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_top_down_fabrics_fabric_vrfs_deployments_post_with_http_info(fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_top_down_fabrics_fabric_vrfs_deployments_post_with_http_info(fabric, **kwargs)  # noqa: E501
            return data

    def rest_top_down_fabrics_fabric_vrfs_deployments_post_with_http_info(self, fabric, **kwargs):  # noqa: E501
        """deploy vrf  # noqa: E501

        Deploys the previously created VRF to the fabric defined in the URI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_top_down_fabrics_fabric_vrfs_deployments_post_with_http_info(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param object body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric', 'body', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_top_down_fabrics_fabric_vrfs_deployments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_top_down_fabrics_fabric_vrfs_deployments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/top-down/fabrics/{fabric}/vrfs/deployments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_top_down_fabrics_fabric_vrfs_get(self, fabric, **kwargs):  # noqa: E501
        """query vrf  # noqa: E501

        Lists all VRFs in the fabric defined within the URI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_top_down_fabrics_fabric_vrfs_get(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_top_down_fabrics_fabric_vrfs_get_with_http_info(fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_top_down_fabrics_fabric_vrfs_get_with_http_info(fabric, **kwargs)  # noqa: E501
            return data

    def rest_top_down_fabrics_fabric_vrfs_get_with_http_info(self, fabric, **kwargs):  # noqa: E501
        """query vrf  # noqa: E501

        Lists all VRFs in the fabric defined within the URI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_top_down_fabrics_fabric_vrfs_get_with_http_info(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_top_down_fabrics_fabric_vrfs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_top_down_fabrics_fabric_vrfs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/top-down/fabrics/{fabric}/vrfs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_top_down_fabrics_fabric_vrfs_post(self, fabric, **kwargs):  # noqa: E501
        """create vrf  # noqa: E501

        Creates a VRF within the fabric defined in the URI.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_top_down_fabrics_fabric_vrfs_post(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_top_down_fabrics_fabric_vrfs_post_with_http_info(fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_top_down_fabrics_fabric_vrfs_post_with_http_info(fabric, **kwargs)  # noqa: E501
            return data

    def rest_top_down_fabrics_fabric_vrfs_post_with_http_info(self, fabric, **kwargs):  # noqa: E501
        """create vrf  # noqa: E501

        Creates a VRF within the fabric defined in the URI.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_top_down_fabrics_fabric_vrfs_post_with_http_info(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric', 'body', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_top_down_fabrics_fabric_vrfs_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_top_down_fabrics_fabric_vrfs_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/top-down/fabrics/{fabric}/vrfs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_top_down_fabrics_fabric_vrfs_switches_get(self, fabric, **kwargs):  # noqa: E501
        """get switch details by vrf  # noqa: E501

        Used to obtain the switch details per VRF using a comma-separated list of VRF names and switch serial numbers defined within the URI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_top_down_fabrics_fabric_vrfs_switches_get(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str dcnm_token:
        :param str content_type:
        :param str vrf_names:
        :param str serial_numbers:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_top_down_fabrics_fabric_vrfs_switches_get_with_http_info(fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_top_down_fabrics_fabric_vrfs_switches_get_with_http_info(fabric, **kwargs)  # noqa: E501
            return data

    def rest_top_down_fabrics_fabric_vrfs_switches_get_with_http_info(self, fabric, **kwargs):  # noqa: E501
        """get switch details by vrf  # noqa: E501

        Used to obtain the switch details per VRF using a comma-separated list of VRF names and switch serial numbers defined within the URI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_top_down_fabrics_fabric_vrfs_switches_get_with_http_info(fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str dcnm_token:
        :param str content_type:
        :param str vrf_names:
        :param str serial_numbers:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric', 'dcnm_token', 'content_type', 'vrf_names', 'serial_numbers']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_top_down_fabrics_fabric_vrfs_switches_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_top_down_fabrics_fabric_vrfs_switches_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []
        if 'vrf_names' in params:
            query_params.append(('vrf-names', params['vrf_names']))  # noqa: E501
        if 'serial_numbers' in params:
            query_params.append(('serial-numbers', params['serial_numbers']))  # noqa: E501

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/top-down/fabrics/{fabric}/vrfs/switches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_top_down_fabrics_fabric_vrfs_vrf_delete(self, fabric, vrf, **kwargs):  # noqa: E501
        """delete vrf  # noqa: E501

        Deletes the defined VRF within the fabric defined inside of the URI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_top_down_fabrics_fabric_vrfs_vrf_delete(fabric, vrf, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str vrf: (required)
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_top_down_fabrics_fabric_vrfs_vrf_delete_with_http_info(fabric, vrf, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_top_down_fabrics_fabric_vrfs_vrf_delete_with_http_info(fabric, vrf, **kwargs)  # noqa: E501
            return data

    def rest_top_down_fabrics_fabric_vrfs_vrf_delete_with_http_info(self, fabric, vrf, **kwargs):  # noqa: E501
        """delete vrf  # noqa: E501

        Deletes the defined VRF within the fabric defined inside of the URI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_top_down_fabrics_fabric_vrfs_vrf_delete_with_http_info(fabric, vrf, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str vrf: (required)
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric', 'vrf', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_top_down_fabrics_fabric_vrfs_vrf_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_top_down_fabrics_fabric_vrfs_vrf_delete`")  # noqa: E501
        # verify the required parameter 'vrf' is set
        if ('vrf' not in params or
                params['vrf'] is None):
            raise ValueError("Missing the required parameter `vrf` when calling `rest_top_down_fabrics_fabric_vrfs_vrf_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501
        if 'vrf' in params:
            path_params['vrf'] = params['vrf']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/top-down/fabrics/{fabric}/vrfs/{vrf}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_top_down_fabrics_fabric_vrfs_vrf_put(self, fabric, vrf, **kwargs):  # noqa: E501
        """update vrf  # noqa: E501

        Updates the template configuration applied to a VRF after deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_top_down_fabrics_fabric_vrfs_vrf_put(fabric, vrf, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str vrf: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_top_down_fabrics_fabric_vrfs_vrf_put_with_http_info(fabric, vrf, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_top_down_fabrics_fabric_vrfs_vrf_put_with_http_info(fabric, vrf, **kwargs)  # noqa: E501
            return data

    def rest_top_down_fabrics_fabric_vrfs_vrf_put_with_http_info(self, fabric, vrf, **kwargs):  # noqa: E501
        """update vrf  # noqa: E501

        Updates the template configuration applied to a VRF after deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_top_down_fabrics_fabric_vrfs_vrf_put_with_http_info(fabric, vrf, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric: (required)
        :param str vrf: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric', 'vrf', 'body', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_top_down_fabrics_fabric_vrfs_vrf_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_top_down_fabrics_fabric_vrfs_vrf_put`")  # noqa: E501
        # verify the required parameter 'vrf' is set
        if ('vrf' not in params or
                params['vrf'] is None):
            raise ValueError("Missing the required parameter `vrf` when calling `rest_top_down_fabrics_fabric_vrfs_vrf_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501
        if 'vrf' in params:
            path_params['vrf'] = params['vrf']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/top-down/fabrics/{fabric}/vrfs/{vrf}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
