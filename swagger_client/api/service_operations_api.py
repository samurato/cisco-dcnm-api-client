# coding: utf-8

"""
    DCNM Postman Collection

    # Cisco Datacenter Network Manager (DCNM) API Postman Collection  This repository contains the a Postman collection and environment variable file to leverage the REST API on DCNM.  This collection was tested and built using DCNM 11.5(1) within the DevNet Sandbox infrastructure.  As such, some variables will need to be reset if used outside of this testbed.  ## Cisco DCNM Background  DCNM is a network management platform for all NX-OS-centric network deployments.  DCNM has several different installation personas, including LAN Fabric (BGP-EVPN with VXLAN), LAN Management (classic layer-2/layer-3 architecture), IP Fabric for Media (IPFM) and storage networking (SAN), however this collection covers the LAN fabric deployment model supporting an EVPN-VXLAN fabric backed by Nexus 9000-series switching.  APIs for other personas, while potentially overlapping, are not covered as part of this collection.  ## Additional Resources - [DCNM Sandbox on DevNet](https://devnetsandbox.cisco.com/RM/Diagram/Index/4b6f511a-4d7c-4764-927b-0fc591a661c6?diagramType=Topology) - REST API documentation is available off-box [here](https://developer.cisco.com/docs/data-center-network-manager/11-5-1/) - REST API documentation also available directly on the DCNM at `http://DCNM.IP.ADDRESS/api-docs`  ## Covered APIs  - DCNM administration - L4-L7 service operations - Fabric, Network, Interface, VRF, and Link top-down operations - LAN credential management - Policy and Template operations - Physical switch roles and discovery  ## Notes about the included ENV variables  Prior to using any requests, please ensure you gather the token from your DCNM instance using the included API call `dcnm login - gather token`.  This call will log you into the DCNM (using credentials stored in the environment) and automatically store the key for use with every other request in the collection.  In order to keep the environment variables to a reasonable number, reuse was included.  While I made attempts to include commonly reused variables (fabric names, VRF names, etc), the variables may require a bit of context parsing to ensure the correct usage within a particular environment.  In some instances, variables are defined within the payload, but not inside of the environment file to discern that the specific variable should be replaced.  As a final note, for any API or payload referencing a device serial number -- please ensure correct serial numbers are inserted as appropriate.  _In some instances, Javascript tests have been included as part of the API request to populate another variable that would be used somewhere else in that folder of requests (VRF IDs, VLAN IDs, etc).  These can be overridden in the environment settings, but have been included for automated tasks (like using Runner)_  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ServiceOperationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def rest_fabrics_service_fabric_service_node_post(self, service_fabric, **kwargs):  # noqa: E501
        """create service node  # noqa: E501

        Creates a service node within the external service fabric.  The payload will include the fabric that the node is attached to (EasyFabric) as well as the device and port-level information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_node_post(service_fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param object body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_fabrics_service_fabric_service_node_post_with_http_info(service_fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_fabrics_service_fabric_service_node_post_with_http_info(service_fabric, **kwargs)  # noqa: E501
            return data

    def rest_fabrics_service_fabric_service_node_post_with_http_info(self, service_fabric, **kwargs):  # noqa: E501
        """create service node  # noqa: E501

        Creates a service node within the external service fabric.  The payload will include the fabric that the node is attached to (EasyFabric) as well as the device and port-level information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_node_post_with_http_info(service_fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param object body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_fabric', 'body', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_fabrics_service_fabric_service_node_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_fabric' is set
        if ('service_fabric' not in params or
                params['service_fabric'] is None):
            raise ValueError("Missing the required parameter `service_fabric` when calling `rest_fabrics_service_fabric_service_node_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_fabric' in params:
            path_params['service_fabric'] = params['service_fabric']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/fabrics/{service_fabric}/service-node', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_fabrics_service_fabric_service_nodes_get(self, service_fabric, **kwargs):  # noqa: E501
        """get service node   # noqa: E501

        Used to retrieve the service nodes present under the fabric defined within the URI.  The fabric will be an external fabric to the EVPN-VXLAN EasyFabric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_get(service_fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_fabrics_service_fabric_service_nodes_get_with_http_info(service_fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_fabrics_service_fabric_service_nodes_get_with_http_info(service_fabric, **kwargs)  # noqa: E501
            return data

    def rest_fabrics_service_fabric_service_nodes_get_with_http_info(self, service_fabric, **kwargs):  # noqa: E501
        """get service node   # noqa: E501

        Used to retrieve the service nodes present under the fabric defined within the URI.  The fabric will be an external fabric to the EVPN-VXLAN EasyFabric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_get_with_http_info(service_fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_fabric', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_fabrics_service_fabric_service_nodes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_fabric' is set
        if ('service_fabric' not in params or
                params['service_fabric'] is None):
            raise ValueError("Missing the required parameter `service_fabric` when calling `rest_fabrics_service_fabric_service_nodes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_fabric' in params:
            path_params['service_fabric'] = params['service_fabric']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/fabrics/{service_fabric}/service-nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_delete(self, service_fabric, service_node, fabric, **kwargs):  # noqa: E501
        """detach route peering  # noqa: E501

        Used to detach the service networks and their VRF of the selected route peering to service leaf  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_delete(service_fabric, service_node, fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str fabric: (required)
        :param str dcnm_token:
        :param str content_type:
        :param str peering_names:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_delete_with_http_info(service_fabric, service_node, fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_delete_with_http_info(service_fabric, service_node, fabric, **kwargs)  # noqa: E501
            return data

    def rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_delete_with_http_info(self, service_fabric, service_node, fabric, **kwargs):  # noqa: E501
        """detach route peering  # noqa: E501

        Used to detach the service networks and their VRF of the selected route peering to service leaf  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_delete_with_http_info(service_fabric, service_node, fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str fabric: (required)
        :param str dcnm_token:
        :param str content_type:
        :param str peering_names:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_fabric', 'service_node', 'fabric', 'dcnm_token', 'content_type', 'peering_names']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_fabric' is set
        if ('service_fabric' not in params or
                params['service_fabric'] is None):
            raise ValueError("Missing the required parameter `service_fabric` when calling `rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_delete`")  # noqa: E501
        # verify the required parameter 'service_node' is set
        if ('service_node' not in params or
                params['service_node'] is None):
            raise ValueError("Missing the required parameter `service_node` when calling `rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_delete`")  # noqa: E501
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_fabric' in params:
            path_params['service_fabric'] = params['service_fabric']  # noqa: E501
        if 'service_node' in params:
            path_params['service_node'] = params['service_node']  # noqa: E501
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []
        if 'peering_names' in params:
            query_params.append(('peering-names', params['peering_names']))  # noqa: E501

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/fabrics/{service_fabric}/service-nodes/{service_node}/peerings/{fabric}/attachments', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_post(self, service_fabric, service_node, fabric, **kwargs):  # noqa: E501
        """attach route peering  # noqa: E501

        Used to attach the service networks and their VRF of the selected route peerings to service leaf  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_post(service_fabric, service_node, fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str fabric: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_post_with_http_info(service_fabric, service_node, fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_post_with_http_info(service_fabric, service_node, fabric, **kwargs)  # noqa: E501
            return data

    def rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_post_with_http_info(self, service_fabric, service_node, fabric, **kwargs):  # noqa: E501
        """attach route peering  # noqa: E501

        Used to attach the service networks and their VRF of the selected route peerings to service leaf  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_post_with_http_info(service_fabric, service_node, fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str fabric: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_fabric', 'service_node', 'fabric', 'body', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_fabric' is set
        if ('service_fabric' not in params or
                params['service_fabric'] is None):
            raise ValueError("Missing the required parameter `service_fabric` when calling `rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_post`")  # noqa: E501
        # verify the required parameter 'service_node' is set
        if ('service_node' not in params or
                params['service_node'] is None):
            raise ValueError("Missing the required parameter `service_node` when calling `rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_post`")  # noqa: E501
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_attachments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_fabric' in params:
            path_params['service_fabric'] = params['service_fabric']  # noqa: E501
        if 'service_node' in params:
            path_params['service_node'] = params['service_node']  # noqa: E501
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/fabrics/{service_fabric}/service-nodes/{service_node}/peerings/{fabric}/attachments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_delete(self, service_fabric, service_node, fabric, **kwargs):  # noqa: E501
        """delete route peering  # noqa: E501

        Used to delete a service route peering for the selected service node of the type under the selected fabric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_delete(service_fabric, service_node, fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str fabric: (required)
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_delete_with_http_info(service_fabric, service_node, fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_delete_with_http_info(service_fabric, service_node, fabric, **kwargs)  # noqa: E501
            return data

    def rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_delete_with_http_info(self, service_fabric, service_node, fabric, **kwargs):  # noqa: E501
        """delete route peering  # noqa: E501

        Used to delete a service route peering for the selected service node of the type under the selected fabric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_delete_with_http_info(service_fabric, service_node, fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str fabric: (required)
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_fabric', 'service_node', 'fabric', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_fabric' is set
        if ('service_fabric' not in params or
                params['service_fabric'] is None):
            raise ValueError("Missing the required parameter `service_fabric` when calling `rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_delete`")  # noqa: E501
        # verify the required parameter 'service_node' is set
        if ('service_node' not in params or
                params['service_node'] is None):
            raise ValueError("Missing the required parameter `service_node` when calling `rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_delete`")  # noqa: E501
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_fabric' in params:
            path_params['service_fabric'] = params['service_fabric']  # noqa: E501
        if 'service_node' in params:
            path_params['service_node'] = params['service_node']  # noqa: E501
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/fabrics/{service_fabric}/service-nodes/{service_node}/peerings/{fabric}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_depoloyments_post(self, service_fabric, service_node, fabric, **kwargs):  # noqa: E501
        """deploy route peering  # noqa: E501

        Used to deploy the service network and its VRF of the selected route peerings to service leaf  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_depoloyments_post(service_fabric, service_node, fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str fabric: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_depoloyments_post_with_http_info(service_fabric, service_node, fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_depoloyments_post_with_http_info(service_fabric, service_node, fabric, **kwargs)  # noqa: E501
            return data

    def rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_depoloyments_post_with_http_info(self, service_fabric, service_node, fabric, **kwargs):  # noqa: E501
        """deploy route peering  # noqa: E501

        Used to deploy the service network and its VRF of the selected route peerings to service leaf  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_depoloyments_post_with_http_info(service_fabric, service_node, fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str fabric: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_fabric', 'service_node', 'fabric', 'body', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_depoloyments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_fabric' is set
        if ('service_fabric' not in params or
                params['service_fabric'] is None):
            raise ValueError("Missing the required parameter `service_fabric` when calling `rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_depoloyments_post`")  # noqa: E501
        # verify the required parameter 'service_node' is set
        if ('service_node' not in params or
                params['service_node'] is None):
            raise ValueError("Missing the required parameter `service_node` when calling `rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_depoloyments_post`")  # noqa: E501
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_fabrics_service_fabric_service_nodes_service_node_peerings_fabric_depoloyments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_fabric' in params:
            path_params['service_fabric'] = params['service_fabric']  # noqa: E501
        if 'service_node' in params:
            path_params['service_node'] = params['service_node']  # noqa: E501
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/fabrics/{service_fabric}/service-nodes/{service_node}/peerings/{fabric}/depoloyments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_fabrics_service_fabric_service_nodes_service_node_peerings_post(self, service_fabric, service_node, **kwargs):  # noqa: E501
        """create route peering  # noqa: E501

        Used to create service route peering under the selected fabric, i.e. the logic attachment to the easy fabric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_peerings_post(service_fabric, service_node, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_fabrics_service_fabric_service_nodes_service_node_peerings_post_with_http_info(service_fabric, service_node, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_fabrics_service_fabric_service_nodes_service_node_peerings_post_with_http_info(service_fabric, service_node, **kwargs)  # noqa: E501
            return data

    def rest_fabrics_service_fabric_service_nodes_service_node_peerings_post_with_http_info(self, service_fabric, service_node, **kwargs):  # noqa: E501
        """create route peering  # noqa: E501

        Used to create service route peering under the selected fabric, i.e. the logic attachment to the easy fabric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_peerings_post_with_http_info(service_fabric, service_node, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_fabric', 'service_node', 'body', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_fabrics_service_fabric_service_nodes_service_node_peerings_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_fabric' is set
        if ('service_fabric' not in params or
                params['service_fabric'] is None):
            raise ValueError("Missing the required parameter `service_fabric` when calling `rest_fabrics_service_fabric_service_nodes_service_node_peerings_post`")  # noqa: E501
        # verify the required parameter 'service_node' is set
        if ('service_node' not in params or
                params['service_node'] is None):
            raise ValueError("Missing the required parameter `service_node` when calling `rest_fabrics_service_fabric_service_nodes_service_node_peerings_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_fabric' in params:
            path_params['service_fabric'] = params['service_fabric']  # noqa: E501
        if 'service_node' in params:
            path_params['service_node'] = params['service_node']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/fabrics/{service_fabric}/service-nodes/{service_node}/peerings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_fabrics_service_fabric_service_nodes_service_node_policies_delete(self, service_fabric, service_node, **kwargs):  # noqa: E501
        """delete service policy  # noqa: E501

        Used to delete service policies for the selected service node under the selected fabric and attached fabric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_policies_delete(service_fabric, service_node, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_fabrics_service_fabric_service_nodes_service_node_policies_delete_with_http_info(service_fabric, service_node, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_fabrics_service_fabric_service_nodes_service_node_policies_delete_with_http_info(service_fabric, service_node, **kwargs)  # noqa: E501
            return data

    def rest_fabrics_service_fabric_service_nodes_service_node_policies_delete_with_http_info(self, service_fabric, service_node, **kwargs):  # noqa: E501
        """delete service policy  # noqa: E501

        Used to delete service policies for the selected service node under the selected fabric and attached fabric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_policies_delete_with_http_info(service_fabric, service_node, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_fabric', 'service_node', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_fabrics_service_fabric_service_nodes_service_node_policies_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_fabric' is set
        if ('service_fabric' not in params or
                params['service_fabric'] is None):
            raise ValueError("Missing the required parameter `service_fabric` when calling `rest_fabrics_service_fabric_service_nodes_service_node_policies_delete`")  # noqa: E501
        # verify the required parameter 'service_node' is set
        if ('service_node' not in params or
                params['service_node'] is None):
            raise ValueError("Missing the required parameter `service_node` when calling `rest_fabrics_service_fabric_service_nodes_service_node_policies_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_fabric' in params:
            path_params['service_fabric'] = params['service_fabric']  # noqa: E501
        if 'service_node' in params:
            path_params['service_node'] = params['service_node']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/fabrics/{service_fabric}/service-nodes/{service_node}/policies', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_delete(self, service_fabric, service_node, fabric, **kwargs):  # noqa: E501
        """detach service policy  # noqa: E501

        Used to disable the service policies on the source or/and destination networks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_delete(service_fabric, service_node, fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str fabric: (required)
        :param str dcnm_token:
        :param str content_type:
        :param str policy_names:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_delete_with_http_info(service_fabric, service_node, fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_delete_with_http_info(service_fabric, service_node, fabric, **kwargs)  # noqa: E501
            return data

    def rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_delete_with_http_info(self, service_fabric, service_node, fabric, **kwargs):  # noqa: E501
        """detach service policy  # noqa: E501

        Used to disable the service policies on the source or/and destination networks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_delete_with_http_info(service_fabric, service_node, fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str fabric: (required)
        :param str dcnm_token:
        :param str content_type:
        :param str policy_names:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_fabric', 'service_node', 'fabric', 'dcnm_token', 'content_type', 'policy_names']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_fabric' is set
        if ('service_fabric' not in params or
                params['service_fabric'] is None):
            raise ValueError("Missing the required parameter `service_fabric` when calling `rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_delete`")  # noqa: E501
        # verify the required parameter 'service_node' is set
        if ('service_node' not in params or
                params['service_node'] is None):
            raise ValueError("Missing the required parameter `service_node` when calling `rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_delete`")  # noqa: E501
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_fabric' in params:
            path_params['service_fabric'] = params['service_fabric']  # noqa: E501
        if 'service_node' in params:
            path_params['service_node'] = params['service_node']  # noqa: E501
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []
        if 'policy_names' in params:
            query_params.append(('policy-names', params['policy_names']))  # noqa: E501

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/fabrics/{service_fabric}/service-nodes/{service_node}/policies/{fabric}/attachments', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_post(self, service_fabric, service_node, fabric, **kwargs):  # noqa: E501
        """attach service policy  # noqa: E501

        Used to enable the service policies on the source or/and destination networks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_post(service_fabric, service_node, fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str fabric: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_post_with_http_info(service_fabric, service_node, fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_post_with_http_info(service_fabric, service_node, fabric, **kwargs)  # noqa: E501
            return data

    def rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_post_with_http_info(self, service_fabric, service_node, fabric, **kwargs):  # noqa: E501
        """attach service policy  # noqa: E501

        Used to enable the service policies on the source or/and destination networks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_post_with_http_info(service_fabric, service_node, fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str fabric: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_fabric', 'service_node', 'fabric', 'body', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_fabric' is set
        if ('service_fabric' not in params or
                params['service_fabric'] is None):
            raise ValueError("Missing the required parameter `service_fabric` when calling `rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_post`")  # noqa: E501
        # verify the required parameter 'service_node' is set
        if ('service_node' not in params or
                params['service_node'] is None):
            raise ValueError("Missing the required parameter `service_node` when calling `rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_post`")  # noqa: E501
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_attachments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_fabric' in params:
            path_params['service_fabric'] = params['service_fabric']  # noqa: E501
        if 'service_node' in params:
            path_params['service_node'] = params['service_node']  # noqa: E501
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/fabrics/{service_fabric}/service-nodes/{service_node}/policies/{fabric}/attachments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_deployments_post(self, service_fabric, service_node, fabric, **kwargs):  # noqa: E501
        """deploy service policy  # noqa: E501

        Used to deploy the service policy on the source or/and destination network if those networks have been attached.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_deployments_post(service_fabric, service_node, fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str fabric: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_deployments_post_with_http_info(service_fabric, service_node, fabric, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_deployments_post_with_http_info(service_fabric, service_node, fabric, **kwargs)  # noqa: E501
            return data

    def rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_deployments_post_with_http_info(self, service_fabric, service_node, fabric, **kwargs):  # noqa: E501
        """deploy service policy  # noqa: E501

        Used to deploy the service policy on the source or/and destination network if those networks have been attached.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_deployments_post_with_http_info(service_fabric, service_node, fabric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str fabric: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_fabric', 'service_node', 'fabric', 'body', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_deployments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_fabric' is set
        if ('service_fabric' not in params or
                params['service_fabric'] is None):
            raise ValueError("Missing the required parameter `service_fabric` when calling `rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_deployments_post`")  # noqa: E501
        # verify the required parameter 'service_node' is set
        if ('service_node' not in params or
                params['service_node'] is None):
            raise ValueError("Missing the required parameter `service_node` when calling `rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_deployments_post`")  # noqa: E501
        # verify the required parameter 'fabric' is set
        if ('fabric' not in params or
                params['fabric'] is None):
            raise ValueError("Missing the required parameter `fabric` when calling `rest_fabrics_service_fabric_service_nodes_service_node_policies_fabric_deployments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_fabric' in params:
            path_params['service_fabric'] = params['service_fabric']  # noqa: E501
        if 'service_node' in params:
            path_params['service_node'] = params['service_node']  # noqa: E501
        if 'fabric' in params:
            path_params['fabric'] = params['fabric']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/fabrics/{service_fabric}/service-nodes/{service_node}/policies/{fabric}/deployments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_fabrics_service_fabric_service_nodes_service_node_policies_post(self, service_fabric, service_node, **kwargs):  # noqa: E501
        """create service policy  # noqa: E501

        Used to create a service policy for the selected service node under the selected fabric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_policies_post(service_fabric, service_node, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_fabrics_service_fabric_service_nodes_service_node_policies_post_with_http_info(service_fabric, service_node, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_fabrics_service_fabric_service_nodes_service_node_policies_post_with_http_info(service_fabric, service_node, **kwargs)  # noqa: E501
            return data

    def rest_fabrics_service_fabric_service_nodes_service_node_policies_post_with_http_info(self, service_fabric, service_node, **kwargs):  # noqa: E501
        """create service policy  # noqa: E501

        Used to create a service policy for the selected service node under the selected fabric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabrics_service_fabric_service_nodes_service_node_policies_post_with_http_info(service_fabric, service_node, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str body:
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_fabric', 'service_node', 'body', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_fabrics_service_fabric_service_nodes_service_node_policies_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_fabric' is set
        if ('service_fabric' not in params or
                params['service_fabric'] is None):
            raise ValueError("Missing the required parameter `service_fabric` when calling `rest_fabrics_service_fabric_service_nodes_service_node_policies_post`")  # noqa: E501
        # verify the required parameter 'service_node' is set
        if ('service_node' not in params or
                params['service_node'] is None):
            raise ValueError("Missing the required parameter `service_node` when calling `rest_fabrics_service_fabric_service_nodes_service_node_policies_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_fabric' in params:
            path_params['service_fabric'] = params['service_fabric']  # noqa: E501
        if 'service_node' in params:
            path_params['service_node'] = params['service_node']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/fabrics/{service_fabric}/service-nodes/{service_node}/policies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_fabricsservice_fabric_service_node_service_node_peerings_get(self, service_fabric, service_node, **kwargs):  # noqa: E501
        """get route peering of node  # noqa: E501

        Used to retrieve service route peering(s) for the selected service node under the selected fabric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabricsservice_fabric_service_node_service_node_peerings_get(service_fabric, service_node, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_fabricsservice_fabric_service_node_service_node_peerings_get_with_http_info(service_fabric, service_node, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_fabricsservice_fabric_service_node_service_node_peerings_get_with_http_info(service_fabric, service_node, **kwargs)  # noqa: E501
            return data

    def rest_fabricsservice_fabric_service_node_service_node_peerings_get_with_http_info(self, service_fabric, service_node, **kwargs):  # noqa: E501
        """get route peering of node  # noqa: E501

        Used to retrieve service route peering(s) for the selected service node under the selected fabric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_fabricsservice_fabric_service_node_service_node_peerings_get_with_http_info(service_fabric, service_node, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_fabric', 'service_node', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_fabricsservice_fabric_service_node_service_node_peerings_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_fabric' is set
        if ('service_fabric' not in params or
                params['service_fabric'] is None):
            raise ValueError("Missing the required parameter `service_fabric` when calling `rest_fabricsservice_fabric_service_node_service_node_peerings_get`")  # noqa: E501
        # verify the required parameter 'service_node' is set
        if ('service_node' not in params or
                params['service_node'] is None):
            raise ValueError("Missing the required parameter `service_node` when calling `rest_fabricsservice_fabric_service_node_service_node_peerings_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_fabric' in params:
            path_params['service_fabric'] = params['service_fabric']  # noqa: E501
        if 'service_node' in params:
            path_params['service_node'] = params['service_node']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/fabrics{service_fabric}/service-node/{service_node}/peerings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_service_fabric_service_nodes_service_node_delete(self, service_fabric, service_node, **kwargs):  # noqa: E501
        """delete service node  # noqa: E501

        Removes the service node defined in the URI from the external service fabric (also defined in the URI)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_service_fabric_service_nodes_service_node_delete(service_fabric, service_node, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_service_fabric_service_nodes_service_node_delete_with_http_info(service_fabric, service_node, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_service_fabric_service_nodes_service_node_delete_with_http_info(service_fabric, service_node, **kwargs)  # noqa: E501
            return data

    def rest_service_fabric_service_nodes_service_node_delete_with_http_info(self, service_fabric, service_node, **kwargs):  # noqa: E501
        """delete service node  # noqa: E501

        Removes the service node defined in the URI from the external service fabric (also defined in the URI)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_service_fabric_service_nodes_service_node_delete_with_http_info(service_fabric, service_node, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_fabric', 'service_node', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_service_fabric_service_nodes_service_node_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_fabric' is set
        if ('service_fabric' not in params or
                params['service_fabric'] is None):
            raise ValueError("Missing the required parameter `service_fabric` when calling `rest_service_fabric_service_nodes_service_node_delete`")  # noqa: E501
        # verify the required parameter 'service_node' is set
        if ('service_node' not in params or
                params['service_node'] is None):
            raise ValueError("Missing the required parameter `service_node` when calling `rest_service_fabric_service_nodes_service_node_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_fabric' in params:
            path_params['service_fabric'] = params['service_fabric']  # noqa: E501
        if 'service_node' in params:
            path_params['service_node'] = params['service_node']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/{service_fabric}/service-nodes/{service_node}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_service_fabric_service_nodes_service_node_policies_get(self, service_fabric, service_node, **kwargs):  # noqa: E501
        """get service policy  # noqa: E501

        Used to retrieve service policies for the selected service node under the selected fabric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_service_fabric_service_nodes_service_node_policies_get(service_fabric, service_node, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_service_fabric_service_nodes_service_node_policies_get_with_http_info(service_fabric, service_node, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_service_fabric_service_nodes_service_node_policies_get_with_http_info(service_fabric, service_node, **kwargs)  # noqa: E501
            return data

    def rest_service_fabric_service_nodes_service_node_policies_get_with_http_info(self, service_fabric, service_node, **kwargs):  # noqa: E501
        """get service policy  # noqa: E501

        Used to retrieve service policies for the selected service node under the selected fabric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_service_fabric_service_nodes_service_node_policies_get_with_http_info(service_fabric, service_node, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_fabric: (required)
        :param str service_node: (required)
        :param str dcnm_token:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_fabric', 'service_node', 'dcnm_token', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_service_fabric_service_nodes_service_node_policies_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_fabric' is set
        if ('service_fabric' not in params or
                params['service_fabric'] is None):
            raise ValueError("Missing the required parameter `service_fabric` when calling `rest_service_fabric_service_nodes_service_node_policies_get`")  # noqa: E501
        # verify the required parameter 'service_node' is set
        if ('service_node' not in params or
                params['service_node'] is None):
            raise ValueError("Missing the required parameter `service_node` when calling `rest_service_fabric_service_nodes_service_node_policies_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_fabric' in params:
            path_params['service_fabric'] = params['service_fabric']  # noqa: E501
        if 'service_node' in params:
            path_params['service_node'] = params['service_node']  # noqa: E501

        query_params = []

        header_params = {}
        if 'dcnm_token' in params:
            header_params['dcnm-token'] = params['dcnm_token']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/{service_fabric}/service-nodes/{service_node}/policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
